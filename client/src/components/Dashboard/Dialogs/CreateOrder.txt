import React, { useEffect, useState } from "react";
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import IconButton from "@mui/material/IconButton";
import AttachFileIcon from "@mui/icons-material/AttachFile";
import AddPhotoAlternateIcon from "@mui/icons-material/AddPhotoAlternate";

import { useDispatch, useSelector } from "react-redux";
import { Link } from "react-router-dom";
import styled from "styled-components";
import { postProductBO, getArticulos, OrdersBO } from "../../../actions";
import { postImage } from "../../../services/api/postImage";
import { ReduxState } from "../../../reducer/index";

import InputLabel from "@mui/material/InputLabel";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import Select, { SelectChangeEvent } from "@mui/material/Select";

import Avatar from "@mui/material/Avatar";
import Stack from "@mui/material/Stack";
import FolderIcon from "@mui/icons-material/Folder";
import FormHelperText from "@mui/material/FormHelperText";

export interface CardOrderProps {
  order: OrdersBO;
  stateC: any;
}

export default function FormDialog({
  order = {
    id: 0,
    amount: 0,
    date: '',
    status: "",
    userId: 0,
    payment_id: 0,
    payment_status: "",
    payment_type: "",
    order_detail: [
      {
        id: 0,
        orderId: 0,
        productId: 0,
        price: 0,
        quantity: 0,
        product: {
          id: 0,
          name: "",
          brand: "",
          stock: 0,
          price: 0,
          img: "",
          state: "",
          categoryId: 0,
          category: {
            id: 0,
            name: "",
          },
          totalCount: 0
        },
      },
    ],
    user: {
      id: 0,
      name: "",
      surname: "",
      email: "",
      password: "",
      state: "",
      role: "",
    },
  },
  stateC,
}: CardOrderProps) {
  const dispatch = useDispatch<any>();
  const [input, setInput] = useState({
    id: order.id || 0,
    name: order.name || "",
    brand: order.brand || "",
    img: order.img || "",
    state: order.state || "",
    price: order.price || 0,
    stock: order.stock || 0,
    categoryId: order.category.id || 0,
    errors: null,
  });

  const token = useSelector((state: ReduxState) => state.token);
  const categories = useSelector((state: ReduxState) => state.categorias);
  const allProducts = useSelector((state: ReduxState) => state.articulos);
  const allUser = useSelector((state: ReduxState) => state.users);

  function validation(e) {
    let errors = {};
    if (e) {
      if (e.target.name === "name" && e.target.value === "") {
        errors["name"] = { action: { error: true }, message: "required" };
      }
      if (e.target.name === "price" && e.target.value <= 0) {
        errors["price"] = { action: { error: true }, message: "required" };
      }
      if (e.target.name === "stock" && e.target.value <= 0) {
        errors["stock"] = { action: { error: true }, message: "required" };
      }
      if (e.target.name === "brand" && e.target.value === "") {
        errors["brand"] = { action: { error: true }, message: "required" };
      }
      if (e.target.name === "categoryId" && e.target.value <= 0) {
        errors["categoryId"] = { action: { error: true }, message: "required" };
      }
      if (e.target.name === "state" && e.target.value === "") {
        errors["state"] = { action: { error: true }, message: "required" };
      }
    } else {
      if (input.name === "") {
        errors["name"] = { action: { error: true }, message: "required" };
      }
      if (input.price <= 0) {
        errors["price"] = { action: { error: true }, message: "required" };
      }
      if (input.stock <= 0) {
        errors["stock"] = { action: { error: true }, message: "required" };
      }
      if (input.brand === "") {
        errors["brand"] = { action: { error: true }, message: "required" };
      }
      if (input.categoryId === 0) {
        errors["categoryId"] = { action: { error: true }, message: "required" };
      }
      if (input.state === "") {
        errors["state"] = { action: { error: true }, message: "required" };
      }
      if (input.img === "") {
        errors["img"] = { action: { error: true }, message: "" };
      }
    }

    return errors;
  }

  function handlechange(e) {
    setInput({
      ...input,
      [e.target.name]: e.target.value,
      errors: validation(e),
    });
  }

  async function handleImageChange(e: React.ChangeEvent<HTMLInputElement>) {
    handlePostImage(e.target.files[0]);
  }

  async function handlePostImage(images: File) {
    const url = await postImage(images);
    setInput({
      ...input,
      img: url,
    });
  }

  async function handelSubmit(e) {
    e.preventDefault();
    const errors = validation(null);
    setInput({
      ...input,
      errors: errors,
    });
    if (Object.getOwnPropertyNames(errors).length === 0) {
      await dispatch(postProductBO(token, input));
      await dispatch(
        getArticulos({
          page: stateC.page,
          pageSize: 12,
          name: stateC.name,
          order: "id",
          direction: "desc",
          categoryId: stateC.categoryId,
        })
      );
      handleClose();
    }
  }
  const [open, setOpen] = React.useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <div>
      <Button variant="outlined" fullWidth onClick={handleClickOpen}>
        {order.id ? "Update" : "Create"}
      </Button>
      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>New Product</DialogTitle>
        <IconButton
          color={input.img !== "" ? "primary" : "error"}
          component="label"
        >
          <input
            type="file"
            accept="image/*"
            hidden
            onChange={handleImageChange}
          />
          <AddPhotoAlternateIcon fontSize="medium" />
          <Stack direction="row" spacing={2}>
            <Avatar
              alt="Remy Sharp"
              src={input.img}
              sx={{ width: 56, height: 56 }}
            >
              <FolderIcon />
            </Avatar>
          </Stack>
        </IconButton>

        <DialogContent>
          <TextField
            {...input.errors?.name?.action}
            autoFocus
            margin="dense"
            id="name"
            name="name"
            label="Name"
            type="text"
            fullWidth
            value={input.name}
            variant="standard"
            onChange={handlechange}
            helperText={input.errors?.name?.message}
          />

          {/* <Button onClick={(e) => handlePostImage(e)}>Subir Imagen</Button> */}
          <TextField
            {...input.errors?.price?.action}
            autoFocus
            margin="dense"
            id="price"
            name="price"
            label="Precio"
            type="number"
            value={input.price}
            fullWidth
            variant="standard"
            onChange={handlechange}
            helperText={input.errors?.price?.message}
          />
          <TextField
            {...input.errors?.stock?.action}
            autoFocus
            margin="dense"
            id="stock"
            name="stock"
            label="Stock"
            type="number"
            value={input.stock}
            fullWidth
            variant="standard"
            onChange={handlechange}
            helperText={input.errors?.stock?.message}
          />

          <TextField
            {...input.errors?.brand?.action}
            autoFocus
            margin="dense"
            id="brand"
            name="brand"
            label="brand"
            value={input.brand}
            type="text"
            fullWidth
            variant="standard"
            onChange={handlechange}
            helperText={input.errors?.brand?.message}
          />

          <FormControl
            sx={{ m: 1, width: "100%" }}
            size="small"
            {...input.errors?.categoryId?.action}
          >
            <InputLabel id="category">Category</InputLabel>
            <Select
              labelId="category"
              id="categoryId"
              name="categoryId"
              label="categoryId"
              value={input.categoryId}
              onChange={handlechange}
            >
              <MenuItem value={0} selected>
                <em>None</em>
              </MenuItem>
              {categories?.map((r, i) => (
                <MenuItem value={r.id}>{r.name}</MenuItem>
              ))}
            </Select>
            <FormHelperText>{input.errors?.categoryId?.message}</FormHelperText>
          </FormControl>

          <FormControl
            sx={{ m: 1, width: "100%" }}
            size="small"
            {...input.errors?.state?.action}
          >
            <InputLabel id="state">State</InputLabel>
            <Select
              labelId="state"
              id="state"
              name="state"
              value={input.state}
              label="state"
              onChange={handlechange}
            >
              <MenuItem value="" selected>
                <em>None</em>
              </MenuItem>
              <MenuItem value="Active">Active</MenuItem>
              <MenuItem value="Inactive">Inactive</MenuItem>
            </Select>
            <FormHelperText>{input.errors?.state?.message}</FormHelperText>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button onClick={handelSubmit}>Save</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
}
